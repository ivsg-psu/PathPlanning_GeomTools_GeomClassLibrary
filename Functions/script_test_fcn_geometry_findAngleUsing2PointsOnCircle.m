% script_test_fcn_geometry_findAngleUsing2PointsOnCircle
% Tests fcn_geometry_findAngleUsing2PointsOnCircle

% Revision history:
%      2021_05_22:
%      -- Edited for new function name


%% BASIC example for one circle, incoming and outgoing are 90 degrees
fig_num = 1;
centers = [0 0];
radii = [1];  %#ok<*NBRAK>

start_angles = [45]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [-45]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

assert(isequal(round(angles,4),4.7124));

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);


%% BASIC example for one circle, incoming and outgoing are 90 degrees
fig_num = 2;
centers = [0 0];
radii = [1];

start_angles = [45]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [-45]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [-1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);

%% BASIC example for one circle, incoming and outgoing are 270 degrees
fig_num = 31;

centers = [0 0];
radii = [1];
start_angles = [135]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [45]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);

%% BASIC example for one circle, incoming and outgoing are 270 degrees
fig_num = 32;

centers = [0 0];
radii = [1];
start_angles = [135]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [45]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [-1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);


%% BASIC example for one circle, incoming and outgoing are on separate sides of -180
fig_num = 41;

centers = [0 0];
radii = [1];
start_angles = [135]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [-135]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);

%% BASIC example for one circle, incoming and outgoing are on separate sides of -180
fig_num = 42;
apex_points = [-1 0];
centers = [0 0];
radii = [1];
start_angles = [135]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [-135]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [-1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);


%% BASIC example for one circle, incoming and outgoing are 180 degrees,
% and it's a good situation
fig_num = 51;

centers = [0 0];
radii = [1];
start_angles = [180]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [0]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);

%% BASIC example for one circle, incoming and outgoing are 180 degrees,
% and it's a good situation
fig_num = 52;

centers = [0 0];
radii = [1];
start_angles = [180]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [0]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [-1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);


%% BASIC example for one circle, incoming and outgoing are same point
fig_num = 61;

centers = [0 0];
radii = [1];
start_angles = [90]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [90]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);

%% BASIC example for one circle, incoming and outgoing are same point
fig_num = 62;

centers = [0 0];
radii = [1];
start_angles = [90]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)];
end_angles = [90]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)];
cross_products = [-1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);


%% ADVANCED example - vectorized
fig_num = 100;

centers = [0 0; 4 4; 8 10; -6 10];
radii = [1; 2; 4; 3];
start_angles = [90; 0; -90; 45]*pi/180;
start_points_on_circle = [radii.*cos(start_angles) radii.*sin(start_angles)]+centers;
end_angles = [45; 135; 180; 0]*pi/180;
end_points_on_circle = [radii.*cos(end_angles) radii.*sin(end_angles)]+centers;
cross_products = [-1; 1; -1; 1];

true_angle = start_angles - end_angles;

[angles] = fcn_geometry_findAngleUsing2PointsOnCircle(...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products,...
    fig_num);

fcn_summarize(angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products);


%% Function start here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function fcn_summarize(...
    angles,...
    true_angle,...
    centers,...
    radii,...
    start_points_on_circle,...
    end_points_on_circle,...
    cross_products)

for i=1:length(angles)
    fprintf(1,'\n\nTrue angle: %.2f\n',true_angle(i,1)*180/pi);
    fprintf(1,'Centers: %.2f %.2f\n',centers(i,1),centers(i,2));
    fprintf(1,'Raddi: %.2f ',radii(i,1));
    fprintf(1,'Start points: %.2f %.2f\n',start_points_on_circle(i,1),start_points_on_circle(i,2));
    fprintf(1,'End points: %.2f %.2f\n',end_points_on_circle(i,1),end_points_on_circle(i,2));
    fprintf(1,'Cross products: %.2f \n',cross_products(i,1));
    fprintf(1,'Calculated angle: %.2f\n',angles(i,1)*180/pi);

end % Ends for loop
end % Ends function

