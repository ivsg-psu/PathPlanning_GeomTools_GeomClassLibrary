% script_test_fcn_geometry_findBreakpointsOfAdjacentSegments.m
% tests fcn_geometry_findBreakpointsOfAdjacentSegments.m

% This script uses "fcn_geometry_HoughRegression.m" to fit the segments

% Revision History
% 2024_02_28 - Aneesh Batchu
% -- Started the script

% To Do
% Add more cases

%% Clear workspace

clc
close all

%% Advanced test 1: Multiple segments were used to create a path 

rng(343)

% fig_num = 901;
fig_num = -1;

% Line test points - Line Segment 1
seed_points = [-15 0; -10 5];
M = 10;
sigma = 0.02;

test_points_line1 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);

% Line test points - Line Segment 2
seed_points = [-10 6; -1 6];
M = 10;
sigma = 0.02;

test_points_line2 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);

% Line test points - Line Segment 3 & 4 & 5
seed_points = [-2 4; 1 10; 7 4; 13 13];
M = 10;
sigma = 0.02;

test_points_line345 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);

% Line test points - Line Segment 6
seed_points = [10, 12; 18, 3];
M = 10;
sigma = 0.02;

test_points_line6 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);


testpoints = [test_points_line1; test_points_line2; test_points_line345; test_points_line6];

% Corrupt the points
fig_num = 801;
fig_nuM = fig_num;
probability_of_corruption = 0.1;
magnitude_of_corruption = 3;

corrupted_testpoints = fcn_geometry_corruptPointsWithOutliers(testpoints,...
    (probability_of_corruption), (magnitude_of_corruption),fig_num);

% Hough Segmentation
% fig_num = 701;
fig_num = -1;
transverse_tolerance = 0.05; % Units are meters
station_tolerance = 0.5; % Units are meters. 
threshold_max_points = 20;
input_points = corrupted_testpoints;

Hough_domains = fcn_geometry_HoughSegmentation(input_points, threshold_max_points, transverse_tolerance, station_tolerance, fig_num);

fig_num = 601;
% fig_num = -1;
% Check the regression fit
regression_domains = fcn_geometry_HoughRegression(Hough_domains, fig_num);
fcn_geometry_plotFitDomains(regression_domains, fig_num+2);



fig_num = fig_nuM;
[endPointsCell, sortedHoughSegmentEndPoints, ~] = fcn_geometry_sortHoughSegments(regression_domains, 5, fig_num);

% endPointsMatrix = zeros(numel(sortedHoughSegmentEndPoints)/2, 2);
% 
% endPointsMatrix(1:2:end,:) = sortedHoughSegmentEndPoints(:,1:2);
% endPointsMatrix(2:2:end,:) = sortedHoughSegmentEndPoints(:,3:4);
% 
% tolerance = 5; 
% 
% [closeEndPointsMatrix, dist_btw_close_endPoints] = fcn_geometry_findEndPoints(endPointsMatrix(1,:), endPointsMatrix(2:end-1,:), endPointsMatrix(end,:), tolerance, fig_num);
% 


curveStartPoint = sortedHoughSegmentEndPoints(1,1:2);
curveEndPoint = sortedHoughSegmentEndPoints(end,3:4);

intersectionPoints = fcn_geometry_findBreakpointsOfAdjacentSegments(curveStartPoint, sortedHoughSegmentEndPoints, curveEndPoint, fig_num);

% intersectionPoints = zeros(length(sortedHoughSegmentEndPoints(:,1))-2,2);
% for i = 1:length(sortedHoughSegmentEndPoints(:,1)) - 1
%     fprintf(1,'Intersection point: \n');
%     wall_start = sortedHoughSegmentEndPoints(i,1:2);
%     wall_end   = sortedHoughSegmentEndPoints(i,3:4);
%     sensor_vector_start = sortedHoughSegmentEndPoints(i+1,1:2);
%     sensor_vector_end   = sortedHoughSegmentEndPoints(i+1,3:4);
%     fig_debugging = 501;
%     flag_search_type =4;
%     [distance,location] = ...
%         fcn_geometry_findIntersectionOfSegments(...
%         wall_start, wall_end,sensor_vector_start,sensor_vector_end,...
%         flag_search_type,fig_debugging);
%     % hold on
%     % disp(location);
%     intersectionPoints(i,:) = location;
% 
%     % print_results(distance,location);
% end
% 
% plotPoints = [curveStartPoint; intersectionPoints; curveEndPoint];
% 
% figure(fig_debugging)
% hold on
% plot(plotPoints(:,1), plotPoints(:,2), '--', 'LineWidth',5, 'Color', [1 1 0]);
% 
% figure(401)
% grid on
% grid minor
% box on
% hold on
% plot(plotPoints(:,1), plotPoints(:,2), '--', 'LineWidth',5, 'Color', [0 0.4470 0.7410]);
% plot(plotPoints(:,1), plotPoints(:,2), '.', 'MarkerSize',30, 'Color', [1 0 0]);

% This function verifies the intersection point by substituting the intersection
% points into the line equation created using the "fit parameters"
% generated by "fcn_geometry_HoughSegmentation"

[verifyIntersectionBool, LHs, RHs] = fcn_geometry_verifyIntersectionPoint(endPointsCell, intersectionPoints);

disp(LHs)
disp(RHs)
disp(verifyIntersectionBool)

%% Advanced test : Multiple segments were used to create a path 

rng(343)

% fig_num = 902;
fig_num = -1;

% Line test points - Line Segment 1
seed_points = [-15 0; -10 5];
M = 10;
sigma = 0.02;

test_points_line1 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);

% Line test points - Line Segment 2
seed_points = [-8 6; -1 6];
M = 10;
sigma = 0.02;

test_points_line2 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);

% Line test points - Line Segment 3 & 4
seed_points = [-4 8; 2 0; 8 0];
M = 10;
sigma = 0.02;

test_points_line34 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);

% Line test points - Line Segment 5
seed_points = [6, -3; 10, 4];
M = 10;
sigma = 0.02;

test_points_line5 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);

% Line test points - Line Segment 6
seed_points = [12, 4; 16, 5];
M = 10;
sigma = 0.02;

test_points_line6 = fcn_geometry_fillLineTestPoints(seed_points, M, sigma, fig_num);


testpoints = [test_points_line1; test_points_line2; test_points_line34; test_points_line5; test_points_line6];

% Corrupt the points
fig_num = 802;
fig_nuM = fig_num;
probability_of_corruption = 0.1;
magnitude_of_corruption = 3;

corrupted_testpoints = fcn_geometry_corruptPointsWithOutliers(testpoints,...
    (probability_of_corruption), (magnitude_of_corruption),fig_num);

% Hough Segmentation
% fig_num = 702;
fig_num = -1;
transverse_tolerance = 0.05; % Units are meters
station_tolerance = 0.5; % Units are meters. 
threshold_max_points = 20;
input_points = corrupted_testpoints;

Hough_domains = fcn_geometry_HoughSegmentation(input_points, threshold_max_points, transverse_tolerance, station_tolerance, fig_num);

% fig_num = 602;
fig_num = -1;
% Check the regression fit
regression_domains = fcn_geometry_HoughRegression(Hough_domains, fig_num);
fcn_geometry_plotFitDomains(regression_domains, fig_num+2);

% fig_num = fig_nuM;
% tolerance = 3;
% [endPointsCell, closeEndPointPairs, distance_btw_endpoints] = fcn_geometry_findBreakpoints(regression_domains, tolerance, fig_num);

fig_num = fig_nuM;
[endPointsCell, sortedHoughSegmentEndPoints, closeEndPointsMatrix] = fcn_geometry_sortHoughSegments(regression_domains,5, fig_num);

% endPointsMatrix = zeros(numel(sortedHoughSegmentEndPoints)/2, 2);
% 
% endPointsMatrix(1:2:end,:) = sortedHoughSegmentEndPoints(:,1:2);
% endPointsMatrix(2:2:end,:) = sortedHoughSegmentEndPoints(:,3:4);
% 
% tolerance = 1; 
% 
% [closeEndPointsMatrix, dist_btw_close_endPoints] = fcn_geometry_findEndPoints(endPointsMatrix(1,:), endPointsMatrix(2:end-1,:), endPointsMatrix(end,:), tolerance, fig_num);
% 


curveStartPoint = sortedHoughSegmentEndPoints(1,1:2);
curveEndPoint = sortedHoughSegmentEndPoints(end,3:4);

intersectionPoints = fcn_geometry_findBreakpointsOfAdjacentSegments(curveStartPoint, sortedHoughSegmentEndPoints, curveEndPoint, fig_num);

% intersectionPoints = zeros(length(sortedHoughSegmentEndPoints(:,1))-2,2);
% for i = 1:length(sortedHoughSegmentEndPoints(:,1)) - 1
%     fprintf(1,'Intersection point: \n');
%     wall_start = sortedHoughSegmentEndPoints(i,1:2);
%     wall_end   = sortedHoughSegmentEndPoints(i,3:4);
%     sensor_vector_start = sortedHoughSegmentEndPoints(i+1,1:2);
%     sensor_vector_end   = sortedHoughSegmentEndPoints(i+1,3:4);
%     fig_debugging = 502;
%     flag_search_type =4;
%     [distance,location] = ...
%         fcn_geometry_findIntersectionOfSegments(...
%         wall_start, wall_end,sensor_vector_start,sensor_vector_end,...
%         flag_search_type,fig_debugging);
%     % hold on
%     disp(location);
%     intersectionPoints(i,:) = location;
% 
%     % print_results(distance,location);
% end
% 
% plotPoints = [curveStartPoint; intersectionPoints; curveEndPoint];
% 
% figure(fig_debugging)
% hold on
% plot(plotPoints(:,1), plotPoints(:,2), '--', 'LineWidth',5, 'Color', [1 1 0]);
% 
% figure(402)
% grid on
% grid minor
% box on
% hold on
% plot(plotPoints(:,1), plotPoints(:,2), '--', 'LineWidth',5, 'Color', [0 0.4470 0.7410]);
% plot(plotPoints(:,1), plotPoints(:,2), '.', 'MarkerSize',30, 'Color', [1 0 0]);

[verifyIntersectionBool, LHs, RHs] = fcn_geometry_verifyIntersectionPoint(endPointsCell, intersectionPoints);

disp(LHs)
disp(RHs)
disp(verifyIntersectionBool)

%%
function print_results(distance,location) %#ok<DEFNU>
fprintf(1,'Distance \t Location X \t Location Y \n');
if ~isempty(distance)
    for i_result = 1:length(distance(:,1))
        fprintf(1,'%.3f \t\t %.3f \t\t\t %.3f\n',distance(i_result),location(i_result,1),location(i_result,2));
    end
end
end


