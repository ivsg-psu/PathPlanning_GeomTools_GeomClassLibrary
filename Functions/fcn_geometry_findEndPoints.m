function [closeEndPointsMatrix, dist_btw_close_endPoints] = fcn_geometry_findEndPoints(curveStartPoint, endPointsMatrix, curveEndPoint, tolerance, varargin)
% fcn_geometry_findBreakpoints
%
% This function takes the domains generated by Hough Segmentation,
% tolerance as the inputs and ouputs breakPointCell that contains the first
% and last point of the hough fits, type of hough fit, the parameters of
% the fit and the break points of the fitted curve. If the distance between
% two break points is less than or equal to this tolerance, they are
% considered as the close break point pairs
%
% FORMAT: 
%
% [closeEndPointsMatrix, dist_btw_close_endPoints] = fcn_geometry_findEndPoints(curveStartPoint, endPointsMatrix, curveEndPoint, tolerance, varargin)
% 
% INPUTS:
%
% curveStartPoint: Start point of the curve
%
% endPointsMatrix: All the end points of Hough segments (except the first
% point of the first segment and the last point of the last segment)
% 
% curveEndPoint: End point of the curve
%
% tolerance: the allowed maximum distance between two end points to be
% considered as close end point pairs.
%
% (OPTIONAL INPUTS)
% 
%      fig_num: a figure number to plot results. If set to -1, skips any
%      input checking or debugging, no figures will be generated, and sets
%      up code to maximize speed.
%
% OUTPUTS: 
%
% closeEndPointsMatrix: This is a [N x 2] vector of close end point
% pairs that are within the tolerance limit
%
% dist_btw_close_endPoints: The distance between all the end points to
% debug and compare (with the tolerance)
%
% DEPENDENCIES:
%
%   fcn_DebugTools_checkInputsToFunctions
%
% EXAMPLES:
%      
% See the script: script_test_fcn_geometry_findEndpoints
% for a full test suite.
%
% This function was written on 2024_02_11 by Aneesh Batchu
% Questions or comments? abb6486@psu.edu or sbrennan@psu.edu

% Revision History
% 2024_02_08 - Aneesh Batchu
% -- wrote the code 
% 2024_02_11 - Aneesh Batchu
% -- modified the function to output the closeBreakPointPairs, later change
% d to endPointsMatrix
% 2024_03_12 - Aneesh Batchu
% -- changed the method to find the end points this function takes the
% endPointsMatrix as the input to find closeEndPointsMatrix

flag_max_speed = 0;
if (nargin==5 && isequal(varargin{end},-1))
    flag_do_debug = 0; % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS");
    MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG = getenv("MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS);
    end
end


if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 34838; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _       
%  |_   _|                 | |      
%    | |  _ __  _ __  _   _| |_ ___ 
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |                  
%              |_| 
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(4,5);

        % Check the tolerance input is a positive single number
        fcn_DebugTools_checkInputsToFunctions(tolerance, 'positive_1column_of_numbers',1);

    end
end

% Does user want to specify fig_num?
fig_num = []; % Default is to have no figure
flag_do_plots = 0;
if (0==flag_max_speed) && (5<= nargin)
    temp = varargin{end};
    if ~isempty(temp)
        fig_num = temp;
        flag_do_plots = 1;
    end
end

%% Main Code starts from here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _       
%  |  \/  |     (_)      
%  | \  / | __ _ _ _ __  
%  | |\/| |/ _` | | '_ \ 
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Indices of close end points
idx_close_endPoints = [(1:2:length(endPointsMatrix))' (2:2:length(endPointsMatrix))'];

% distance between the close end points
dist_btw_close_endPoints = (sum((endPointsMatrix(idx_close_endPoints(:,1),:) - endPointsMatrix(idx_close_endPoints(:,2),:)).^2,2)).^0.5;

% Check if the distance between adjacent (close) end points is less than
% tolerance
true_idx_close_endPoints = idx_close_endPoints(dist_btw_close_endPoints <= tolerance,:);

% create NaN matrix of size [2:end-1, 2] for pre allocation
% NaN_matrix = nan(length(endPointsMatrix), 2);

% Save the true_idx_close_endPoints in the endPointsMatrix
% NaN_matrix = endPointsMatrix(reshape(true_idx_close_endPoints', numel(idx_close_endPoints), 1),:); 
reshaped_endPointsMatrix = endPointsMatrix(reshape(true_idx_close_endPoints.', [], 1),:);

% close_endPoints = endPointsMatrix(reshape(true_idx_close_endPoints.', [], 1),:); 

closeEndPointsMatrix = [curveStartPoint; reshaped_endPointsMatrix; curveEndPoint];

%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _                 
%  |  __ \     | |                
%  | |  | | ___| |__  _   _  __ _ 
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/ 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if flag_do_plots
    figure(fig_num)

% Plotting the close break point pairs
plot(reshaped_endPointsMatrix(:,1), reshaped_endPointsMatrix(:,2), '.g', 'MarkerSize',30, 'DisplayName','End Points within Tolerance', 'LineWidth',2);
plot(reshaped_endPointsMatrix(:,1), reshaped_endPointsMatrix(:,2), 'or', 'MarkerSize',20, 'LineWidth',4,  'DisplayName','End Points within Tolerance');
xlabel('X');
ylabel('Y');
grid on;


end

if flag_do_debug
    fprintf(1,'ENDING function: %s, in file: %s\n\n',st(1).name,st(1).file);
end

end

%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง
% Initial MAIN Method
% % All possible 2 point combinations 
% combos = nchoosek(1:size(endPointsMatrix,1), 2);
% 
% % Find distances between the break points
% distance_btw_endpoints = (sum((endPointsMatrix(combos(:,2),:) - endPointsMatrix(combos(:,1),:)).^2,2)).^0.5;
% 
% 
% % Finding the indices of break point close pairs
% idx_endpoint_close_pairs = combos(distance_btw_endpoints <= tolerance,:);
% 
% % Reshaping the indices as a column matrix
% idx_endpoint_close_pairs_column = reshape(idx_endpoint_close_pairs.', [], 1);
% 
% % Finding the break point close pairs 
% closeEndPointPairs = endPointsMatrix(idx_endpoint_close_pairs_column,:);
% 
% % Paired closeEndPointPairs
% % closeEndPointPairs_paired = [closeEndPointPairs(1:2:end,:),closeEndPointPairs(2:2:end,:)];


