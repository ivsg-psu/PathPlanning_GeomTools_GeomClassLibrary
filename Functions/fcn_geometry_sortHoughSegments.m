function [endPointsCell, sortedHoughSegmentEndPoints] = fcn_geometry_sortHoughSegments(domains, varargin)
% fcn_geometry_sortHoughSegments
%
% This function takes the domains generated by Hough Segmentation,
% tolerance as the inputs and ouputs endPointsCell that contains the first
% and last point of the hough fits, type of hough fit, the parameters of
% the fit and the sorted Hough segments along the positive x-direction.
%
% FORMAT: 
%
% [endPointsCell, sortedHoughSegments] = fcn_geometry_sortHoughSegments(domains, varargin)
% 
% INPUTS:
%
% domains: the fitted domains of the segments, ordered from the fit
% that has the most points included, to the domain that has the least. The
% output of fcn_geometry_HoughSegmentation
%
%
% (OPTIONAL INPUTS)
% 
%      fig_num: a figure number to plot results. If set to -1, skips any
%      input checking or debugging, no figures will be generated, and sets
%      up code to maximize speed.
%
% OUTPUTS: 
%
% endPointsCell: this cell struct array has the first and last point of
% all the hough fits, type of each hough fit, and the parameters of each
% fit.
%
% sortedHoughSegments: This is a [N x 4] matrix of end points of sorted
% Hough segments
%
% DEPENDENCIES:
%
%   NONE
%
% EXAMPLES:
%      
% See the script: script_test_fcn_geometry_findBreakpoints
% for a full test suite.
%
% This function was written on 2024_02_29 by Aneesh Batchu
% Questions or comments? abb6486@psu.edu or sbrennan@psu.edu

% Revision History
% 2024_02_29 
% -- wrote the code - Aneesh Batchu


flag_max_speed = 0;
if (nargin==2 && isequal(varargin{end},-1))
    flag_do_debug = 0; % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS");
    MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG = getenv("MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS);
    end
end


if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 34838; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _       
%  |_   _|                 | |      
%    | |  _ __  _ __  _   _| |_ ___ 
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |                  
%              |_| 
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(1,2);

        % Check the tolerance input is a positive single number
        % fcn_DebugTools_checkInputsToFunctions(tolerance, 'positive_1column_of_numbers',1);

    end
end

% Does user want to specify fig_num?
fig_num = []; % Default is to have no figure
flag_do_plots = 0;
if (0==flag_max_speed) && (2<= nargin)
    temp = varargin{end};
    if ~isempty(temp)
        fig_num = temp;
        flag_do_plots = 1;
    end
end

%% Main Code starts from here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _       
%  |  \/  |     (_)      
%  | \  / | __ _ _ _ __  
%  | |\/| |/ _` | | '_ \ 
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

N_houghDomains = length(domains) - 1;

% Empty endPoints domain structure
endPoints.firstEndPoint = [nan nan];
endPoints.lastEndPoint = [nan nan];
endPoints.fitType = 'empty';
endPoints.fitParameters = nan;

% Create a cell array to save the structure of each fit
endPointsCellArray = cell(1,N_houghDomains);

% This loop saves the first and last points of each fit domain as the first
% and last break points in breakPointsCell cell array. This cell array also
% stores the fit type and parameters

endPointsMatrix = zeros(2*N_houghDomains, 2);

for i = 1:N_houghDomains

    % Sort the points in domain of each Hough segment
    [sortedHoughSegmentDomain_x, sortedHoughSegmentDomainIndices] = sort(domains{i}.points_in_domain(:,1));
    
    sortedHoughSegmentDomain = domains{i}.points_in_domain(sortedHoughSegmentDomainIndices,:);
    
    % For debugging: delete this conditional statement debegguing
    if 1 ~= max(sortedHoughSegmentDomain_x == sortedHoughSegmentDomain(:,1))
        error('The hough segment domain is not sorted. The first and the last point of the Hough segment are wrong')
    end

    endPointsCellArray{i} = endPoints;
    % Each Hough segment domain is sorted to determine the first and last
    % points. 
    endPointsCellArray{i}.firstEndPoint = sortedHoughSegmentDomain(1,:); 
    endPointsCellArray{i}.lastEndPoint = sortedHoughSegmentDomain(end,:);
    endPointsCellArray{i}.fitType = domains{i}.best_fit_type;
    endPointsCellArray{i}.fitParameters = domains{i}.best_fit_parameters;

   
    % Saving the break points in an array to find the closest break points
    endPointsMatrix(2*(i-1)+1,:) = endPointsCellArray{i}.firstEndPoint;
    endPointsMatrix(2*i,:) = endPointsCellArray{i}.lastEndPoint;

end

% The first and last points of all the Hough segments are paired
paired_HoughSegments = [endPointsMatrix(1:2:end,:),endPointsMatrix(2:2:end,:)];

% The paired Hough segments are sorted along the x direction
[~, sortedIndices] = sort(paired_HoughSegments(:,1)); 

% The sorted Hough segments along x direction
sortedHoughSegmentEndPoints = paired_HoughSegments(sortedIndices,:);

% The sorted endPoints cell array based on sorted Hough segments (along +ve
% x direction)
endPointsCell= endPointsCellArray(sortedIndices);

%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _                 
%  |  __ \     | |                
%  | |  | | ___| |__  _   _  __ _ 
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/ 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if flag_do_plots
    figure(fig_num)

    % Plotting the close break point pairs
    plot(sortedHoughSegmentEndPoints(:,1), sortedHoughSegmentEndPoints(:,2), 'oc', 'MarkerSize',20, 'DisplayName','First Points', 'LineWidth',3);
    hold on
    plot(sortedHoughSegmentEndPoints(:,3), sortedHoughSegmentEndPoints(:,4), '.b', 'MarkerSize',20, 'DisplayName','Last Points');
    legend('Empty Points', 'Points', 'First Points', 'Last Points');
    xlabel('X');
    ylabel('Y');
    grid on;

end

if flag_do_debug
    fprintf(1,'ENDING function: %s, in file: %s\n\n',st(1).name,st(1).file);
end

end

%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง


