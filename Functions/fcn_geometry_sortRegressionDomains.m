function [endPointsCell, sortedHoughSegmentEndPoints, closeEndPointsMatrix] = fcn_geometry_sortRegressionDomains(domains, tolerance, varargin)
%% fcn_geometry_sortRegressionDomains
%
% This function takes the domains generated by Hough Segmentation and
% tolerance as the input, and ouputs end points cell structure array that
% contains the first and last point of the hough fits, type of hough fit,
% the parameters of the fit, the sorted Hough segments along the
% positive x-direction, and the close end points matrix (if the tolerance is not empty).
%
% FORMAT: 
%
% [endPointsCell, sortedHoughSegmentEndPoints, endPointsMatrix] = fcn_geometry_sortHoughSegments(domains, tolerance, varargin)
% 
% INPUTS:
%
% domains: the fitted domains of the segments, ordered from the fit that
% has the most points included, to the domain that has the least. The
% output of fcn_geometry_HoughSegmentation
%
% tolerance: [] or positive_1column_of_numbers, the maximum distance
% between two end points to be considered as close (adjacent) end point
% pairs.
%
% (OPTIONAL INPUTS)
% 
%      fig_num: a figure number to plot results. If set to -1, skips any
%      input checking or debugging, no figures will be generated, and sets
%      up code to maximize speed.
%
% OUTPUTS: 
%
% endPointsCell: this cell struct array has the first and last point of
% all the hough fits, type of each hough fit, and the parameters of each
% fit.
%
% sortedHoughSegments: This is a [N x 4] matrix of end points of sorted
% Hough segments
%
% closeEndPointsMatrix: This is a [M x 2] matrix of close end point pairs
% that are within the tolerance limit. 
%
%
% DEPENDENCIES:
%
%   fcn_geometry_findEndPoints
%
% EXAMPLES:
%      
% See the script: script_test_fcn_geometry_sortHoughSegments
% for a full test suite.
%
% This function was written on 2024_02_29 by Aneesh Batchu
% Questions or comments? abb6486@psu.edu or sbrennan@psu.edu

% Revision History
% 2024_02_29 - Aneesh Batchu
% -- wrote the code 
% 2024_03_12 - Aneesh Batchu
% -- Modified the function to take the tolerance as the input and output
% the closeEndPointMatrix. 
% 2024_03_25 - Aneesh Batchu
% -- This function can now sort all types of regression domains (not just
% segments)
% 2024_03_28 - Aneesh Batchu
% -- Function is modifed to "fcn_geometry_sortRegressionDomains" from
% "fcn_geometry_sortHoughSegments"


flag_max_speed = 0;
if (nargin==3 && isequal(varargin{end},-1))
    flag_do_debug = 0; % Flag to plot the results for debugging
    flag_check_inputs = 0; % Flag to perform input checking
    flag_max_speed = 1;
else
    % Check to see if we are externally setting debug mode to be "on"
    flag_do_debug = 0; % Flag to plot the results for debugging
    flag_check_inputs = 1; % Flag to perform input checking
    MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS = getenv("MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS");
    MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG = getenv("MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG");
    if ~isempty(MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS) && ~isempty(MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG)
        flag_do_debug = str2double(MATLABFLAG_GEOMETRY_FLAG_DO_DEBUG);
        flag_check_inputs  = str2double(MATLABFLAG_GEOMETRY_FLAG_CHECK_INPUTS);
    end
end


if flag_do_debug
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
    debug_fig_num = 34838; %#ok<NASGU>
else
    debug_fig_num = []; %#ok<NASGU>
end

%% check input arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _       
%  |_   _|                 | |      
%    | |  _ __  _ __  _   _| |_ ___ 
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |                  
%              |_| 
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if 0==flag_max_speed
    if flag_check_inputs
        % Are there the right number of inputs?
        narginchk(2,3);

        % Check the tolerance input is a positive single number
        % fcn_DebugTools_checkInputsToFunctions(tolerance, 'positive_1column_of_numbers',1);

    end
end

% Does user want to specify fig_num?
fig_num = []; % Default is to have no figure
flag_do_plots = 0;
if (0==flag_max_speed) && (3<= nargin)
    temp = varargin{end};
    if ~isempty(temp)
        fig_num = temp;
        flag_do_plots = 1;
    end
end

%% Main Code starts from here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _       
%  |  \/  |     (_)      
%  | \  / | __ _ _ _ __  
%  | |\/| |/ _` | | '_ \ 
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

N_houghDomains = length(domains) - 1;

% Empty endPoints domain structure
endPoints.firstEndPoint = [nan nan];
endPoints.lastEndPoint = [nan nan];
endPoints.fitType = 'empty';
endPoints.fitParameters = nan;

% Create a cell array to save the structure of each fit
endPointsCellArray = cell(1,N_houghDomains);

% This loop saves the first and last points of each fit domain as the first
% and last end points in endPointsCell cell array. This cell array also
% stores the fit type and parameters

endPointsMatrix = zeros(2*N_houghDomains, 2);

for i = 1:N_houghDomains

    % Sort the first and last point of the "points in domain" of each Hough segment along the x-direction
    if (domains{i}.points_in_domain(1,1) <=  domains{i}.points_in_domain(end,1))
        sortedEndPoints_in_x_direction = [domains{i}.points_in_domain(1,:);domains{i}.points_in_domain(end,:)];
    else
        sortedEndPoints_in_x_direction = [domains{i}.points_in_domain(end,:);domains{i}.points_in_domain(1,:)];
    end
    % % For debugging: delete this conditional statement after debegguing
    % if 1 ~= max(sortedHoughSegmentDomain_x == sortedHoughSegmentDomain(:,1))
    %     error('The hough segment domain is not sorted. The first and the last point of the Hough segment are wrong')
    % end
 
        endPointsCellArray{i} = endPoints;
        % Each Hough segment domain is sorted to determine the first and last
        % points.
        endPointsCellArray{i}.firstEndPoint = sortedEndPoints_in_x_direction(1,:);
        endPointsCellArray{i}.lastEndPoint = sortedEndPoints_in_x_direction(end,:);
        
        endPointsCellArray{i}.fitType = domains{i}.best_fit_type;
        endPointsCellArray{i}.fitParameters = domains{i}.best_fit_parameters;


        % Saving the break points in an array to find the closest break points
        endPointsMatrix(2*(i-1)+1,:) = endPointsCellArray{i}.firstEndPoint;
        endPointsMatrix(2*i,:) = endPointsCellArray{i}.lastEndPoint;
end

% find distance between the adjacent (close) end points Ex: distance
% between last point of the first segment and first point of the second
% segment

% The first and last points of all the Hough segments are paired
paired_HoughSegmentsEndPoints = [endPointsMatrix(1:2:end,:),endPointsMatrix(2:2:end,:)];

% The paired Hough segments are sorted along the x direction
[~, sortedIndices] = sort(paired_HoughSegmentsEndPoints(:,1)); 

% The sorted Hough segments along x direction
sortedHoughSegmentEndPoints = paired_HoughSegmentsEndPoints(sortedIndices,:);

% The sorted endPoints cell array based on sorted Hough segments (along +ve
% x direction)
endPointsCell= endPointsCellArray(sortedIndices);

if ~isempty(tolerance)

    % Pre-allocating the endPointsMatrix for speed
    endPointsMatrix = zeros(numel(sortedHoughSegmentEndPoints)/2, 2);

    endPointsMatrix(1:2:end,:) = sortedHoughSegmentEndPoints(:,1:2);
    endPointsMatrix(2:2:end,:) = sortedHoughSegmentEndPoints(:,3:4);

    % Start point of the curve
    curveStartPoint = endPointsMatrix(1,:);

    % End point of the curve
    curveEndPoint = endPointsMatrix(end,:);
    % All the end points of Hough segments (except the first point of the
    % first segment and the last point of the last segment)
    endPointsMatrix = endPointsMatrix(2:end-1,:);

    
    % This function finds the end points that are within the tolerance
    % limits
    [closeEndPointsMatrix, ~] = fcn_geometry_findEndPoints(curveStartPoint, endPointsMatrix, curveEndPoint, tolerance, -1); 
else
    % closeEndPointsMatrix = nan(numel(sortedHoughSegmentEndPoints)/2, 2);
    closeEndPointsMatrix = [];
end


%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _                 
%  |  __ \     | |                
%  | |  | | ___| |__  _   _  __ _ 
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/ 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if flag_do_plots
    figure(fig_num)

    % Plotting the close break point pairs
    plot(sortedHoughSegmentEndPoints(:,1), sortedHoughSegmentEndPoints(:,2), 'oc', 'MarkerSize',20, 'DisplayName','First Points', 'LineWidth',3);
    hold on
    plot(sortedHoughSegmentEndPoints(:,3), sortedHoughSegmentEndPoints(:,4), '.b', 'MarkerSize',20, 'DisplayName','Last Points');
    if ~isempty(closeEndPointsMatrix)
        plot(closeEndPointsMatrix(2:end-1,1), closeEndPointsMatrix(2:end-1,2), '.g', 'MarkerSize',30, 'DisplayName','End Points within Tolerance','LineWidth',2);
        plot(closeEndPointsMatrix(2:end-1,1), closeEndPointsMatrix(2:end-1,2), 'or', 'MarkerSize',20, 'DisplayName','End Points within Tolerance','LineWidth',4);
    end

    
    % legend('Empty Points', 'Points', 'First Points', 'Last Points', 'End Points within Tolerance');
    xlabel('X');
    ylabel('Y');
    grid on;

end

if flag_do_debug
    fprintf(1,'ENDING function: %s, in file: %s\n\n',st(1).name,st(1).file);
end

end

%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%§


